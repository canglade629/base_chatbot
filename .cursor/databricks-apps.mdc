---
description:
globs:
alwaysApply: true
---
Add Lakebase to Databricks Apps: https://learn.microsoft.com/en-us/azure/databricks/dev-tools/databricks-apps/lakebase

Connect to Databricks App from local: https://learn.microsoft.com/en-us/azure/databricks/dev-tools/databricks-apps/connect-local

Databricks Apps best practices: https://learn.microsoft.com/en-us/azure/databricks/dev-tools/databricks-apps/best-practices

Manage on-behalf of user auth: https://docs.databricks.com/aws/en/dev-tools/databricks-apps/app-development#add-on-behalf-of-user-authorization-to-a-databricks-app


How Databricks Apps Automatically Authenticate Users
Each Databricks App gets its own service principal. This is a unique identity for the app to access Databricks resources.

Databricks Apps use the OAuth 2.0 protocol for secure authentication. The app receives environment variables (DATABRICKS_CLIENT_ID and DATABRICKS_CLIENT_SECRET) to manage this process automatically.

The app can use On-Behalf-Of (OBO) authorization. This lets the app act on behalf of the user after they approve it—meaning the app can access Databricks resources using the user's own permissions and data access controls set by Unity Catalog.

When users first interact, they’re prompted to authorize the app to act for them. Admins can also approve this for groups of users to make things easier.

As a result, authentication happens seamlessly and securely, with permissions always enforced according to the user’s existing data access policies.



How to guide
Using the app and user authorization
Example usage to access Databricks resources with a service principal and user credentials:
Example

  # cfg with auth for Service Principal
  sp_cfg = sdk.config.Config()

  # request handler
  async def query(user, request: gr.Request):

    # user's email
    email = request.headers.get("X-Forwarded-Email")

    # queries the database (or cache) to fetch user session using the SP
    user_session = get_user_session(sp_cfg, email)

    # user's access token
    user_token = request.headers.get("X-Forwarded-Access-Token")

    # queries the SQL Warehouse on behalf of the end-user
    result = query_warehouse(user_token)

    # save stats in user session
    save_user_session(sp_cfg, email)

    return result